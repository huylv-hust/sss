<?php

namespace app\models;

use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\db\Query;

class Discounts extends ActiveRecord
{
    public static function tableName()
    {
        return 'DISCOUNTS';
    }

    private function getWhere($filters = [], $select = '*')
    {
        $query = new Query();
        $query->select($select)->from(static::tableName());
        if (isset($filters['DISCOUNT_PACKAGES_ID']) && $filters['DISCOUNT_PACKAGES_ID']) {
            $query->andWhere('DISCOUNT_PACKAGES_ID =:discount_packages_id', [':discount_packages_id' => $filters['DISCOUNT_PACKAGES_ID']]);
        }
        if (isset($filters['ID_IN']) && $filters['ID_IN']) {
            $query->andwhere('ID IN (' . $filters['ID_IN'] . ')');
        }
        if (isset($filters['offset']) && $filters['offset']) {
            $query->offset($filters['offset']);
        }

        if (isset($filters['limit']) && $filters['limit']) {
            $query->limit($filters['limit']);
        }

        return $query;
    }

    public function getData($filters = [], $select = '*')
    {
        $query = $this->getWhere($filters, $select);
        $query->orderBy('ID DESC');
        return $query->all();
    }

    public function countData($filters = [], $select = 'ID')
    {
        $query = $this->getWhere($filters, $select);
        return $query->count();
    }

    public function getDataByPackage($package_id)
    {
        $data = $this->findAll(['DISCOUNT_PACKAGES_ID' => $package_id]);
        $discount = [];

        foreach ($data as $k => $v) {
            $discount[$k]['VALUE'] = $v['VALUE'];
            $discount[$k]['DESCRIPTION'] = $v['DESCRIPTION'];
            $discount[$k]['ID'] = $v['ID'];
            $discount[$k]['DISCOUNT_PACKAGES_ID'] = $package_id;
        }

        return $discount;
    }

    public function saveDataMulti($data = [])
    {
        if (!empty($data)) {
            $columnNameArray = ['description', 'value', 'parent_discount_id'];
            $insertCount = $this->getDb()->createCommand()
                ->batchInsert(self::tableName(), $columnNameArray, $data)
                ->execute();
            return $insertCount;
        }
        return true;
    }

    public function getSeq()
    {
        $command = \Yii::$app->db->createCommand('SELECT DISCOUNTS_SEQ.nextval FROM dual');
        $res = $command->queryAll();
        return $res['0']['NEXTVAL'];
    }

    public function beforeSave($insert)
    {
        $this->UPDATED_AT = new Expression("CURRENT_DATE");
        if (!$this->ID) {
            $this->CREATED_AT = new Expression("CURRENT_DATE");
            $this->ID = $this->getSeq();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
