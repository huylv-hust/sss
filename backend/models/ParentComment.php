<?php

namespace app\models;

use yii\base\Exception;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\db\Query;

/**
 * @author Thuanth6589 <thuanth6589@seta-asia.com.vn>
 * This is the model class for table "parent_comment".
 *
 **/
class ParentComment extends ActiveRecord
{
    public static function tableName()
    {
        return 'PARENT_COMMENT';
    }

    private function getWhere($filters = [], $select = '*')
    {
        $login_info = \Yii::$app->session->get('login_info');
        $query = new Query();
        $query->select($select)->from(static::tableName());

        if (isset($login_info['M50_SS_CD']) && $login_info['M50_SS_CD'] != '') {
            $query->andWhere('SS_CD =:ss_cd', [':ss_cd' => $login_info['M50_SS_CD']]);
        }

        if (isset($filters['offset']) && $filters['offset']) {
            $query->offset($filters['offset']);
        }

        if (isset($filters['limit']) && $filters['limit']) {
            $query->limit($filters['limit']);
        }

        return $query;
    }

    public function getData($filters = [], $select = '*')
    {
        $query = $this->getWhere($filters, $select);
        $query->orderBy('ID DESC');
        return $query->all();
    }

    public function counData($filters = [], $select = 'count(id)')
    {
        $query = $this->getWhere($filters, $select);
        return $query->count();
    }

    public function getPrimaryKeyAfterSave()
    {
        return $this->getPrimaryKey();
    }

    public function deleteData($id)
    {
        $transaction = $this->getDb()->beginTransaction();
        try {
            $comment = new Comment();
            if (!$comment->deleteByParentComment($id)) {
                return false;
            }
            if (!$this->delete()) {
                $transaction->rollBack();
                return false;
            }

            $transaction->commit();
            return true;
        } catch (Exception $e) {
            $transaction->rollBack();
            return false;
        }
    }

    public function saveData($comment = [])
    {
        $transaction = $this->getDb()->beginTransaction();
        try {
            //insert-update Parent comment
            if (!$this->save()) {
                return false;
            }
            //insert-update Comment
            foreach ($comment as $k => $v) {
                if ($v['CONTENT'] != '') {
                    $obj_comment = new Comment();
                    if ($v['ID']) {
                        $obj_comment = Comment::findOne($v['ID']);
                    }
                    $obj_comment->setAttributes($v, false);
                    $obj_comment->PARENT_COMMENT_ID = $this->ID;
                    if (!$obj_comment->save()) {
                        return false;
                    }
                }
            }

            $transaction->commit();
            return true;
        } catch (Exception $e) {
            $transaction->rollBack();
        }
        return false;
    }

    public function getSeq()
    {
        $command = $this->getDb()->createCommand('SELECT PARENT_COMMENT_SEQ.nextval FROM dual');
        $res = $command->queryAll();
        return $res['0']['NEXTVAL'];
    }

    public function beforeSave($insert)
    {
        $this->UPDATED_AT = new Expression("CURRENT_DATE");
        if (!$this->ID) {
            $this->CREATED_AT = new Expression("CURRENT_DATE");
            $this->ID = $this->getSeq();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
