<?php

namespace app\models;

use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\db\Query;

/**
 * @author Thuanth6589 <thuanth6589@seta-asia.com.vn>
 * This is the model class for table "comments".
 *
 **/
class Comment extends ActiveRecord
{
    public static function tableName()
    {
        return 'COMMENTS';
    }

    /**
     * @param $id
     * @return bool
     */
    public function deleteByParentComment($id)
    {
        $delete = static::deleteAll('PARENT_COMMENT_ID = ' . $id);
        if (isset($delete)) {
            return true;
        }
        return false;
    }

    /**
     * @param array $data
     * @return bool
     */
    public function saveMulti($data = [])
    {
        if (!empty($data)) {
            $columnNameArray = ['ID', 'CREATED_AT', 'UPDATED_AT', 'CONTENT', 'PARENT_COMMENT_ID'];
            foreach ($data as $k => $v) {
                $tmp = [$this->getSeq(), new Expression("CURRENT_DATE"), new Expression("CURRENT_DATE")];
                $data[$k] = array_merge($tmp, $data[$k]);
            }
            $insertCount = \Yii::$app->db->createCommand()
                ->batchInsert(self::tableName(), $columnNameArray, $data)
                ->execute();
            return $insertCount;
        }
        return true;
    }

    public function getSeq()
    {
        $command = $this->getDb()->createCommand('SELECT COMMENTS_SEQ.nextval FROM dual');
        $res = $command->queryAll();
        return $res['0']['NEXTVAL'];
    }

    private function getWhere($filters = [], $select = '*')
    {
        $query = new Query();
        $query->select($select)->from(static::tableName());

        if (isset($filters['PARENT_COMMENT_ID']) && $filters['PARENT_COMMENT_ID']) {
            $query->andWhere('PARENT_COMMENT_ID =:parent_comment_id', [':parent_comment_id' => $filters['PARENT_COMMENT_ID']]);
        }

        if (isset($filters['array_comment'])) {
            $array_comment = implode(',', $filters['array_comment']);
            $array_comment .= ',0';
            $query->andWhere('ID IN (' . trim($array_comment, ',') . ')');
        }

        if (isset($filters['ID_IN']) && $filters['ID_IN']) {
            $query->andWhere('ID IN (' . $filters['ID_IN'] . ')');
        }

        return $query;
    }

    public function getData($filters = [], $select = '*')
    {
        $query = $this->getWhere($filters, $select);
        $query->orderBy('ID DESC');
        return $query->all();
    }

    public function beforeSave($insert)
    {
        $this->UPDATED_AT = new Expression("CURRENT_DATE");
        if (!$this->ID) {
            $this->CREATED_AT = new Expression("CURRENT_DATE");
            $this->ID = $this->getSeq();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }
}
